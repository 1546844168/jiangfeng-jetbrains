<application>
  <component name="AppStorage">
    <histories>
      <item value="a factory for obtaining metadata readers * for other classes (such as superclasses and interfaces)" />
      <item value="the metadata reader for the target class" />
      <item value="ASSIGNABLE TYPE" />
      <item value="Determine whether this filter matches for the class described by * the given metadata." />
      <item value="Filter candidates using a given custom" />
      <item value="Filter candidates assignable to a given type" />
      <item value="* Filter candidates marked with a given annotation." />
      <item value="Specify whether scanned beans should be registered for lazy initialization." />
      <item value="The class or classes to use as the filter. * &lt;p&gt;The following table explains how the classes will be interpreted * based on the configured value of the {@link #type} attribute. * &lt;table border=&quot;1&quot;&gt; * &lt;tr&gt;&lt;th&gt;{@code FilterType}&lt;/th&gt;&lt;th&gt;Class Interpreted As&lt;/th&gt;&lt;/tr&gt; * &lt;tr&gt;&lt;td&gt;{@link FilterType#ANNOTATION ANNOTATION}&lt;/td&gt; * &lt;td&gt;the annotation itself&lt;/td&gt;&lt;/tr&gt; * &lt;tr&gt;&lt;td&gt;{@link FilterType#ASSIGNABLE_TYPE ASSIGNABLE_TYPE}&lt;/td&gt; * &lt;td&gt;the type that detected components should be assignable to&lt;/td&gt;&lt;/tr&gt; * &lt;tr&gt;&lt;td&gt;{@link FilterType#CUSTOM CUSTOM}&lt;/td&gt; * &lt;td&gt;an implementation of {@link TypeFilter}&lt;/td&gt;&lt;/tr&gt; * &lt;/table&gt; * &lt;p&gt;When multiple classes are specified, &lt;em&gt;OR&lt;/em&gt; logic is applied * &amp;mdash; for example, &quot;include types annotated with {@code @Foo} OR {@code @Bar}&quot;. * &lt;p&gt;Custom {@link TypeFilter TypeFilters} may optionally implement any of the * following {@link org.springframework.beans.factory.Aware Aware} interfaces, and * their respective methods will be called prior to {@link TypeFilter#match match}: * &lt;ul&gt; * &lt;li&gt;{@link org.springframework.context.EnvironmentAware EnvironmentAware}&lt;/li&gt; * &lt;li&gt;{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware} * &lt;li&gt;{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware} * &lt;li&gt;{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware} * &lt;/ul&gt; * &lt;p&gt;Specifying zero classes is permitted but will have no effect on component * scanning. * @since 4.2 * @see #value * @see #type" />
      <item value="value" />
      <item value="resource Pattern" />
      <item value="scoped Proxy" />
      <item value="Indicates whether automatic detection of classes annotated with {@code @Component} * {@code @Repository}, {@code @Service}, or {@code @Controller} should be enabled." />
      <item value="Controls the class files eligible for component detection. * &lt;p&gt;Consider use of {@link #includeFilters} and {@link #excludeFilters} * for a more flexible approach." />
      <item value="Specifies which types are not eligible for component scanning." />
      <item value="Note: You may use placeholders in package paths, but only resolved against system properties (analogous to resource paths). A component scan results in new bean definitions being registered; Spring's PropertySourcesPlaceholderConfigurer will apply to those bean definitions just like to regular bean definitions, but it won't apply to the component scan settings themselves." />
      <item value="Note: This tag implies the effects of the 'annotation-config' tag, activating @Required, @Autowired, @PostConstruct, @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit annotations in the component classes, which is usually desired for autodetected components (without external configuration). Turn off the 'annotation-config' attribute to deactivate this default behavior, for example in order to use custom BeanPostProcessor definitions for handling those annotations." />
      <item value="external" />
      <item value="activating" />
      <item value="implies" />
      <item value="Scans the classpath for annotated components that will be auto-registered as Spring beans. By default, the Spring-provided @Component, @Repository, @Service, @Controller, @RestController, @ControllerAdvice, and @Configuration stereotypes will be detected." />
      <item value="Rest Controller" />
      <item value="Description : A set of build extensions to use from this project." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="13" />
        <entry key="ENGLISH" value="14" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>